// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Customer {
  id               String @id @default(cuid())
  name             String
  email            String @unique
  stripeCustomerId String @unique

  userId String? @unique
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  foreName  String
  lastName  String
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // recordings Recording[]
  // streams Stream[]
}

model Recording {
  id                        String   @id @default(cuid())
  title                     String
  description               String
  imageUrl                  String
  videoUrl                  String?
  price                     Float
  duration                  Int
  isAvailableForSubscribers Boolean  @default(false)
  isPublished               Boolean  @default(false)
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt

  // user   User   @relation(fields: [userId], references: [id])
  userId String?
}

model Stream {
  id                        String   @id @default(cuid())
  title                     String
  description               String
  imageUrl                  String
  price                     Float
  startDate                 DateTime
  duration                  Int
  zoomLink                  String
  meetingId                 String
  meetingPassword           String
  isAvailableForSubscribers Boolean  @default(false)
  isPublished               Boolean  @default(false)
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt

  // user   User   @relation(fields: [userId], references: [id])
  userId String?
  // User   User   @relation(fields: [userId], references: [id])
}

model Purchase {
  id               String   @id @default(cuid())
  userId           String?
  invoiceId        String   @unique
  price            Float
  stripeCustomerId String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  productId   String
  productType String
}

model StripeUserSubscription {
  id                       String    @id @default(cuid())
  userId                   String    @unique
  stripeCustomerId         String?   @unique
  stripeSubscriptionId     String?   @unique
  stripePriceId            String?   @unique
  stripeCurrentPeriodEnd   DateTime?
  stripeSubscriptionStatus String?
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
}
